
import React, { useState, useRef, useEffect } from 'react';
import type { ChatMessage } from '../types';
import { streamChatResponse } from '../services/geminiService';
import { ChatBubbleIcon, XIcon, SendIcon } from './Icons';

const Chatbot: React.FC = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState<ChatMessage[]>([]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const chatContainerRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        if (chatContainerRef.current) {
            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
    }, [messages]);

    const handleSendMessage = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!input.trim() || isLoading) return;

        const userMessage: ChatMessage = { sender: 'user', text: input };
        setMessages(prev => [...prev, userMessage]);
        setInput('');
        setIsLoading(true);

        const botMessage: ChatMessage = { sender: 'bot', text: '' };
        setMessages(prev => [...prev, botMessage]);
        
        try {
            const stream = streamChatResponse(input);
            for await (const chunk of stream) {
                const chunkText = chunk.text;
                setMessages(prev => {
                    const newMessages = [...prev];
                    const lastMessage = newMessages[newMessages.length - 1];
                    if (lastMessage && lastMessage.sender === 'bot') {
                        lastMessage.text += chunkText;
                    }
                    return newMessages;
                });
            }
        } catch (error) {
            console.error('Chatbot error:', error);
            setMessages(prev => {
                const newMessages = [...prev];
                const lastMessage = newMessages[newMessages.length - 1];
                if (lastMessage && lastMessage.sender === 'bot') {
                    lastMessage.text = "Désolé, une erreur s'est produite. Veuillez réessayer.";
                }
                return newMessages;
            });
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <>
            <div className="fixed bottom-5 right-5 z-50">
                <button
                    onClick={() => setIsOpen(!isOpen)}
                    className="bg-blue-600 text-white rounded-full p-4 shadow-lg hover:bg-blue-700 transition-transform transform hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    aria-label="Ouvrir le chatbot"
                >
                    {isOpen ? <XIcon className="h-8 w-8" /> : <ChatBubbleIcon className="h-8 w-8" />}
                </button>
            </div>

            {isOpen && (
                <div className="fixed bottom-24 right-5 w-full max-w-sm h-[70vh] max-h-[600px] bg-white rounded-lg shadow-2xl flex flex-col z-50 border border-slate-200">
                    <header className="bg-blue-600 text-white p-4 rounded-t-lg flex justify-between items-center">
                        <h3 className="font-semibold text-lg">Assistant AMS</h3>
                        <button onClick={() => setIsOpen(false)} className="hover:text-blue-200">
                            <XIcon className="h-6 w-6" />
                        </button>
                    </header>
                    
                    <div ref={chatContainerRef} className="flex-1 p-4 overflow-y-auto space-y-4">
                        <div className="flex justify-start">
                            <div className="bg-slate-100 text-slate-800 rounded-lg p-3 max-w-xs break-words">
                                Bonjour ! Comment puis-je vous aider concernant nos services ?
                            </div>
                        </div>
                        {messages.map((msg, index) => (
                            <div key={index} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                                <div className={`rounded-lg p-3 max-w-xs break-words ${msg.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-slate-100 text-slate-800'}`}>
                                    {msg.text}
                                    {isLoading && msg.sender === 'bot' && index === messages.length - 1 && <span className="inline-block w-2 h-2 ml-2 bg-slate-500 rounded-full animate-pulse"></span>}
                                </div>
                            </div>
                        ))}
                    </div>

                    <div className="p-4 border-t border-slate-200">
                        <form onSubmit={handleSendMessage} className="flex items-center space-x-2">
                            <input
                                type="text"
                                value={input}
                                onChange={(e) => setInput(e.target.value)}
                                placeholder="Posez votre question..."
                                className="flex-1 border-slate-300 rounded-full py-2 px-4 focus:ring-blue-500 focus:border-blue-500"
                                disabled={isLoading}
                            />
                            <button
                                type="submit"
                                className="bg-blue-600 text-white rounded-full p-3 hover:bg-blue-700 disabled:bg-blue-300 transition"
                                disabled={isLoading || !input.trim()}
                            >
                                <SendIcon className="h-5 w-5" />
                            </button>
                        </form>
                    </div>
                </div>
            )}
        </>
    );
};

export default Chatbot;
