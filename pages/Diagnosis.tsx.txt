
import React, { useState } from 'react';
import { generateDiagnosis } from '../services/geminiService';
import type { QuizQuestion, QuizAnswers } from '../types';
import { QUIZ_QUESTIONS } from '../constants';
import { LightBulbIcon } from '../components/Icons';

const Diagnosis: React.FC = () => {
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [answers, setAnswers] = useState<QuizAnswers>({});
    const [result, setResult] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const currentQuestion: QuizQuestion = QUIZ_QUESTIONS[currentQuestionIndex];
    const isQuizFinished = currentQuestionIndex >= QUIZ_QUESTIONS.length;

    const handleAnswer = (answer: string) => {
        const newAnswers = { ...answers, [currentQuestion.key]: answer };
        setAnswers(newAnswers);
        if (currentQuestionIndex < QUIZ_QUESTIONS.length - 1) {
            setCurrentQuestionIndex(currentQuestionIndex + 1);
        } else {
            setCurrentQuestionIndex(currentQuestionIndex + 1);
            handleSubmit(newAnswers);
        }
    };

    const handleSubmit = async (finalAnswers: QuizAnswers) => {
        setIsLoading(true);
        setError('');
        try {
            const diagnosisResult = await generateDiagnosis(finalAnswers);
            setResult(diagnosisResult);
        } catch (err) {
            setError('Une erreur est survenue lors de la génération de votre diagnostic. Veuillez réessayer.');
            console.error(err);
        } finally {
            setIsLoading(false);
        }
    };

    const resetQuiz = () => {
        setCurrentQuestionIndex(0);
        setAnswers({});
        setResult('');
        setError('');
    };

    return (
        <div className="bg-slate-50 min-h-[80vh]">
            <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24">
                <div className="max-w-3xl mx-auto text-center">
                    <LightBulbIcon className="h-16 w-16 mx-auto text-blue-500" />
                    <h1 className="mt-4 text-4xl font-extrabold text-slate-900 sm:text-5xl tracking-tight">
                        Diagnostic Intelligent
                    </h1>
                    <p className="mt-4 text-xl text-slate-500">
                        Répondez à quelques questions rapides pour obtenir un premier aperçu et des conseils personnalisés pour votre entreprise.
                    </p>
                </div>

                <div className="mt-12 max-w-2xl mx-auto bg-white p-8 rounded-lg shadow-lg">
                    {!isQuizFinished ? (
                        <div>
                            <p className="text-sm font-semibold text-blue-600">Question {currentQuestionIndex + 1} sur {QUIZ_QUESTIONS.length}</p>
                            <h2 className="mt-2 text-2xl font-bold text-slate-800">{currentQuestion.question}</h2>
                            <div className="mt-6 space-y-4">
                                {currentQuestion.options.map((option) => (
                                    <button
                                        key={option}
                                        onClick={() => handleAnswer(option)}
                                        className="w-full text-left p-4 border border-slate-300 rounded-lg hover:bg-blue-50 hover:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                    >
                                        {option}
                                    </button>
                                ))}
                            </div>
                            <div className="mt-6 h-2 bg-slate-200 rounded-full overflow-hidden">
                                <div className="h-full bg-blue-600 transition-all duration-500" style={{ width: `${((currentQuestionIndex + 1) / QUIZ_QUESTIONS.length) * 100}%` }}></div>
                            </div>
                        </div>
                    ) : (
                        <div>
                            {isLoading && (
                                <div className="text-center">
                                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                                    <p className="mt-4 text-slate-600">Analyse de vos réponses en cours...</p>
                                </div>
                            )}
                            {error && <p className="text-red-500 text-center">{error}</p>}
                            {result && (
                                <div>
                                    <h2 className="text-3xl font-bold text-slate-800 text-center mb-6">Votre Diagnostic Personnalisé</h2>
                                    <div className="prose prose-blue max-w-none" dangerouslySetInnerHTML={{ __html: result.replace(/\n/g, '<br />').replace(/### (.*?)<br \/>/g, '<h3>$1</h3>').replace(/\* \*(.*?)\* \*/g, '<strong>$1</strong>') }} />
                                    <button onClick={resetQuiz} className="mt-8 w-full bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-700 transition-colors">
                                        Refaire le diagnostic
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default Diagnosis;
